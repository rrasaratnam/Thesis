@article{bandur2021making,
  title = {Making the {{Case}} for {{Centralized Automotive E}}/{{E Architectures}}},
  author = {Bandur, Victor and Selim, Gehan and Pantelic, Vera and Lawford, Mark},
  year = {2021},
  month = feb,
  journal = {IEEE Transactions on Vehicular Technology},
  volume = {70},
  number = {2},
  pages = {1230--1245},
  issn = {1939-9359},
  doi = {10.1109/TVT.2021.3054934},
  urldate = {2025-07-09},
  abstract = {The rapidly increasing complexity of software in modern cars dictates new trends in electrical and/or electronic (E/E) automotive architectures. As a result, many original equipment manufacturers (OEMs) and suppliers have been advocating centralized E/E architectures as the automotive architectures of the future. In this article we make the case for centralized E/E architectures in the automotive industry. We discuss the motivation for centralized architectural schemes by carefully examining challenges and drawbacks of the traditional decentralized automotive E/E architectures, while contrasting with the corresponding benefits offered by centralization. Then, the technologies required to support new centralized architectures are discussed in detail. In particular, we present the state of the art in networking technologies, virtualization, electronic control unit (ECU) hardware and AUTOSAR, and discuss the state of adoption of these technologies in industry. Throughout, functional safety is considered and addressed as an overarching concern in the automotive industry.},
  keywords = {Architecture,Automotive E/E architecture,Automotive engineering,centralization,Computer architecture,domain control,functional safety,Hardware,ISO 26 262,Market research,Safety,Software},
  file = {/home/rushanth/Zotero/storage/IS8P5WVC/Bandur et al. - 2021 - Making the Case for Centralized Automotive EE Architectures.pdf}
}

@book{bass2021,
  title = {Software {{Architecture}} in {{Practice}}, 4th {{Edition}}},
  author = {Bass, Len and Clements, Paul and Kazman, Rick},
  year = {2021},
  edition = {1st edition},
  publisher = {Addison-Wesley Professional},
  address = {Erscheinungsort nicht ermittelbar},
  abstract = {The Definitive, Practical, Proven Guide to Architecting Modern Software--Now Fully Updated Now with nine new chapters, Software Architecture in Practice, Fourth Edition, thoroughly explains what software architecture is, why it's important, and how to design, instantiate, analyze, evolve, and manage it in disciplined and effective ways. Three renowned software architects cover the entire lifecycle, presenting practical guidance, expert methods, and tested models for use in any project, no matter how complex. You'll learn how to use architecture to address accelerating growth in requirements, system size, and abstraction, and to manage emergent quality attributes as systems are dynamically combined in new ways. With insights for utilizing architecture to optimize key quality attributes--including performance, modifiability, security, availability, interoperability, testability, usability, deployability, and more--this guide explains how to manage and refine existing architectures, transform them to solve new problems, and build reusable architectures that become strategic business assets. Discover how architecture influences (and is influenced by) technical environments, project lifecycles, business profiles, and your own practices Leverage proven patterns, interfaces, and practices for optimizing quality through architecture Architect for mobility, the cloud, machine learning, and quantum computing Design for increasingly crucial attributes such as energy efficiency and safety Scale systems by discovering architecturally significant influences, using DevOps and deployment pipelines, and managing architecture debt Understand architecture's role in the organization, so you can deliver more value},
  collaborator = {{Safari, an O'Reilly Media Company}},
  isbn = {978-0-13-688597-9},
  language = {eng}
}

@article{bello2019,
  title = {Recent {{Advances}} and {{Trends}} in {{On-Board Embedded}} and {{Networked Automotive Systems}}},
  author = {Bello, Lucia Lo and Mariani, Riccardo and Mubeen, Saad and Saponara, Sergio},
  year = {2019},
  month = feb,
  journal = {IEEE Transactions on Industrial Informatics},
  volume = {15},
  number = {2},
  pages = {1038--1051},
  issn = {1551-3203, 1941-0050},
  doi = {10.1109/TII.2018.2879544},
  urldate = {2025-06-09},
  copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
  file = {/home/rushanth/Zotero/storage/FMFA562S/Bello et al. - 2019 - Recent Advances and Trends in On-Board Embedded and Networked Automotive Systems.pdf}
}

@inproceedings{bocchi2008,
  title = {Service-{{Oriented Modelling}} of {{Automotive Systems}}},
  booktitle = {2008 32nd {{Annual IEEE International Computer Software}} and {{Applications Conference}}},
  author = {Bocchi, Laura and Fiadeiro, Jos{\'e} Luiz and Lopes, Ant{\'o}nia},
  year = {2008},
  month = jul,
  pages = {1059--1064},
  issn = {0730-3157},
  doi = {10.1109/COMPSAC.2008.228},
  urldate = {2025-06-09},
  abstract = {We discuss the suitability of service-oriented computing for the automotive domain. We present a formal high-level language in which complex automotive activities can be modelled in terms of components and services that can either be provided by the on-board system or procured from external providers (e.g. via the web) through a negotiation process that involves quality of service attributes and constraints. The ability to re-configure activities, in real-time, through service discovery and dynamic binding takes us one step further from current component-based development techniques: it enhances flexibility and adaptability to changes that occur in the environment in which the system operates (driver, automobile, and external circumstances) and, ultimately, leads to improved levels of satisfaction, safety and reliability.},
  keywords = {Argon,Business,Chromium,Gallium,Global positioning system,System-on-a-chip,Tin},
  file = {/home/rushanth/Zotero/storage/QWXW57XC/Bocchi et al. - 2008 - Service-Oriented Modelling of Automotive Systems.pdf;/home/rushanth/Zotero/storage/MXKYD5A6/4591722.html}
}

@inproceedings{broy2006,
  title = {Challenges in Automotive Software Engineering},
  booktitle = {Proceedings of the 28th International Conference on {{Software}} Engineering},
  author = {Broy, Manfred},
  year = {2006},
  month = may,
  series = {{{ICSE}} '06},
  pages = {33--42},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/1134285.1134292},
  urldate = {2025-06-07},
  abstract = {The amount of software in cars grows exponentially. Driving forces of this development are cheaper and more powerful hardware and the demand for innovations by new functions. The rapid increase of software and software based functionality brings various challenges (see [21], [23], [25], [26]) for the automotive industries, for their organization, key competencies, processes, methods, tools, models, product structures, division of work, logistics, maintenance, and long term strategies. From a software engineering perspective, the automotive industry is an ideal and fascinating application domain for advanced techniques. Although the automotive industry may adopt general results and solutions from the software engineering body of knowledge gained in other domains, the specific constraints and domain specific requirements in the automotive industry ask for individual solutions and bring various challenges for automotive software engineering. In cars we find literally all interesting problems and challenging issues of software and systems engineering.},
  isbn = {978-1-59593-375-1},
  file = {/home/rushanth/Zotero/storage/YCZMECVB/Broy - 2006 - Challenges in automotive software engineering.pdf}
}

@inproceedings{bucaioni2020technical,
  title = {Technical {{Architectures}} for {{Automotive Systems}}},
  booktitle = {2020 {{IEEE International Conference}} on {{Software Architecture}} ({{ICSA}})},
  author = {Bucaioni, Alessio and Pelliccione, Patrizio},
  year = {2020},
  month = mar,
  pages = {46--57},
  doi = {10.1109/ICSA47634.2020.00013},
  urldate = {2025-06-13},
  abstract = {Driven by software, the automotive domain is living an unprecedented revolution with original equipment manufacturers increasingly becoming software companies. Vehicle electrical and electronic software architectures are considered means for addressing several concerns, which span from safety to security, through electrification and autonomy. Such architectures serve also as pivotal means for enabling communication between an original equipment manufacturer and suppliers (tier 1 and 2 companies) within the automotive ecosystem. In the automotive domain, software architectures include (at least) three different views of descending abstraction: functional, logical, and technical. In this work, we focus on the technical view with a two-folded contribution. On the one hand, we propose a feature model of technical architectures for automotive systems. On the other hand, starting from the elicited feature model, we present three technical reference architectures able to guide three generations of automotive systems. We evaluate the contribution of this work by means of a focus group validation session and short semi-structured interviews with automotive experts and practitioners.},
  keywords = {automotive,Automotive engineering,Companies,Computer architecture,Hardware,Software,software architecture,Software architecture,technical architecture,Topology},
  file = {/home/rushanth/Zotero/storage/HHTWV26R/Bucaioni and Pelliccione - 2020 - Technical Architectures for Automotive Systems.pdf}
}

@article{bucher2019crosslayera,
  title = {Cross-{{Layer Behavioral Modeling}} and {{Simulation}} of {{E}}/{{E-Architectures}} Using {{PREEvision}} and {{Ptolemy II}}},
  author = {Bucher, Harald and Kamm, Simon and Becker, J{\"u}rgen},
  year = {2019},
  month = jun,
  journal = {SNE Simulation Notes Europe},
  volume = {29},
  number = {2},
  pages = {73--78},
  issn = {23059974, 23060271},
  doi = {10.11128/sne.29.tn.10472},
  urldate = {2025-07-12},
  abstract = {In this paper, an approach for integrated behavior modeling and simulation within model-based electric/electronic-architecture (EEA) descriptions is presented. It leverages actor-oriented and UML state chart behavior modeling to address complex reactive systems. A key contribution is the aggregation of cross-layer behavior specified at the logical function architecture layer and at the hardware layer together with further properties of the EEA like the current consumption of electronic control units (ECUs) and the underlying network topology. The EEA and behavior modeling is done in the common industry tool PREEvision. Using these static descriptions, a unified simulation model is synthesized and executed using Ptolemy II, which extends a previously developed approach. In addition, a concept to feed back the simulation data into PREEvision is briefly described e.g., to further evaluate the gained results. Finally, a proof-of-concept is presented using an Adaptive Cruise Control application.},
  language = {en},
  file = {/home/rushanth/Zotero/storage/GTVEGJ7V/Bucher et al. - 2019 - Cross-Layer Behavioral Modeling and Simulation of EE-Architectures using PREEvision and Ptolemy II.pdf}
}

@inproceedings{cebotari2019,
  title = {On the {{Nature}} of {{Automotive Service Architectures}}},
  booktitle = {2019 {{IEEE International Conference}} on {{Software Architecture Companion}} ({{ICSA-C}})},
  author = {Cebotari, Vadim and Kugele, Stefan},
  year = {2019},
  month = mar,
  pages = {53--60},
  doi = {10.1109/ICSA-C.2019.00017},
  urldate = {2025-06-07},
  abstract = {Context: Current trends in the automotive industry like automated driving, machine intelligence, and digitisation introduce more and more complex functions and their interplay in in-vehicle architectures. To cope with this complexity, car makers are introducing particularly tailored service-oriented architectures. Aim: We aim at developing a formal and methodological approach to model and structure automotive service architectures. Method: We present a formal model to specify and group automotive service-oriented architectures following a classification scheme. Furthermore, a well-defined property model is introduced facilitating the specification and verification of deployment and run-time requirements. The approach is illustrated using a realistic case example. Conclusion: The presented approach works well for the used case example but needs to be further evaluated in depth in the future. However, we strongly believe that the framework is promising and will receive further attention in future work.},
  keywords = {automotive,Automotive engineering,Computer architecture,property model,Safety,Security,service classification,service-oriented architecture,Service-oriented architecture,Syntactics},
  file = {/home/rushanth/Zotero/storage/QKDPQIUC/Cebotari und Kugele - 2019 - On the Nature of Automotive Service Architectures.pdf}
}

@inproceedings{cebotari2020,
  title = {Playground for {{Early Automotive Service Architecture Design}} and {{Evaluation}}},
  booktitle = {2020 {{IEEE Intelligent Vehicles Symposium}} ({{IV}})},
  author = {Cebotari, Vadim and Kugele, Stefan},
  year = {2020},
  month = oct,
  pages = {1349--1356},
  issn = {2642-7214},
  doi = {10.1109/IV47402.2020.9304633},
  urldate = {2025-06-07},
  abstract = {Context: We consider the structure of service-oriented architectures in vehicular software. Aim: We aim at evaluating the structure and grouping of service architectures. Method: We propose and discuss architectural metrics tailored towards automotive service-oriented architectures. We apply the metrics on an adaptive cruise control case example extracted from the AUTOSAR standard. Results: The application of the proposed metrics to two different service groupings for ACC points clearly to the same service grouping that we consider, after a thorough analysis, to be better with respect to coupling and cohesion attributes. Conclusion: We demonstrate the usefulness of proposed service group metrics in early design phases of the development process and validate the metrics on the case example of an adaptive cruise control function.},
  keywords = {Automotive engineering,Couplings,Measurement,Process control,Runtime,Service-oriented architecture,Software},
  file = {/home/rushanth/Zotero/storage/952CVY45/Cebotari und Kugele - 2020 - Playground for Early Automotive Service Architecture Design and Evaluation.pdf}
}

@article{chenStudyFixedPoint2024,
  title = {Study of {{Fixed Point Message Scheduling Algorithm}} for {{In-Vehicle Ethernet}}},
  author = {Chen, Jiaoyue and Zuo, Qihui and Xu, Yihu and Wu, Yujing and Jin, Wenquan and Xu, Yinan},
  year = {2024},
  month = may,
  journal = {Electronics},
  volume = {13},
  number = {11},
  pages = {2050},
  issn = {2079-9292},
  doi = {10.3390/electronics13112050},
  urldate = {2025-06-06},
  abstract = {With the rapid development of advanced driver assistance systems (ADASs) and autonomous driving technology, in-vehicle networks are facing huge challenges in real-time operation and data loss. Traditional vehicle bus network systems such as LIN, CAN, and FlexRay are insufficient to meet the real-time requirements of intelligent connected vehicles. In-vehicle Ethernet meets the requirements of high reliability, low electromagnetic radiation, low power consumption, bandwidth allocation, low latency, and real-time synchronization of intelligent connected vehicles. In-vehicle Ethernet has become one of the trends in the next generation of in-vehicle network architecture. This research focuses on the delay problem existing in the real-time data transmission process of in-vehicle Ethernet, and innovatively proposes a fixed point message scheduling algorithm (FPMS) based on time-sensitive network (TSN) technology. By building an experimental platform based on the CANoe simulation tool, the high-efficiency message transmission performance of the fixed point message scheduling algorithm was verified. Experimental results show that the fixed point message scheduling algorithm proposed in this study improves message transmission efficiency by 66\%, laying a solid foundation for improving the real-time and reliability performance of in-vehicle Ethernet.},
  copyright = {https://creativecommons.org/licenses/by/4.0/},
  language = {en},
  file = {/home/rushanth/Zotero/storage/I9J8SWZF/Chen et al. - 2024 - Study of Fixed Point Message Scheduling Algorithm for In-Vehicle Ethernet.pdf}
}

@article{deandradeAnalyticalExperimentalPerformance2018,
  title = {Analytical and {{Experimental Performance Evaluations}} of {{CAN-FD Bus}}},
  author = {De Andrade, Ricardo and Hodel, Kleber N. and Justo, Joao Francisco and Lagana, Armando M. and Santos, Max Mauro and Gu, Zonghua},
  year = {2018},
  journal = {IEEE Access},
  volume = {6},
  pages = {21287--21295},
  issn = {2169-3536},
  doi = {10.1109/ACCESS.2018.2826522},
  urldate = {2025-06-06},
  copyright = {https://creativecommons.org/licenses/by/3.0/legalcode},
  file = {/home/rushanth/Zotero/storage/LWJYR8F7/De Andrade et al. - 2018 - Analytical and Experimental Performance Evaluations of CAN-FD Bus.pdf}
}

@inproceedings{henle2022,
  title = {Architecture Platforms for Future Vehicles: A Comparison of {{ROS2}} and {{Adaptive AUTOSAR}}},
  shorttitle = {Architecture Platforms for Future Vehicles},
  booktitle = {2022 {{IEEE}} 25th {{International Conference}} on {{Intelligent Transportation Systems}} ({{ITSC}})},
  author = {Henle, Jacqueline and Stoffel, Martin and Schindewolf, Marc and N{\"a}gele, Ann-Therese and Sax, Eric},
  year = {2022},
  month = oct,
  pages = {3095--3102},
  doi = {10.1109/ITSC55140.2022.9921894},
  urldate = {2025-06-07},
  abstract = {Autonomous Vehicles (AVs) are supposed to be continuously updated, besides that they combine many diverse applications by various developers. Accordingly, they require flexible and dynamic software (SW) architectures. With communication paradigms changing from signal-based to service- oriented architectures (SOAs), long-established standards seem no longer sufficient. The AUTomotive Open System ARchi-tecture (AUTOSAR) Platform came up with the Adaptive standard to meet future automobile requirements. Alongside, while requirements of AV s and robotic systems are similar to a certain extent, the Robot Operating System (ROS) gets growing attention in the automotive environment. With the introduction of ROS2 and ROS2-based commercial solutions, the Adaptive AUTOSAR Platform seems not to be the only appropriate standard for developing high-performing SW architectures. This paper provides an overall picture of Adaptive AUTOSAR and ROS2 and evaluates ROS2 and its suitability in an auto-motive context based on the Adaptive AUTOSAR architecture. This research analyzes the extent to which ROS2 fulfills the functionality provided by Adaptive AUTOSAR.},
  keywords = {Adaptive AUTOSAR,Automotive,Computer architecture,Industries,Market research,ROS2,Security,Service-oriented Architecture,Software,Technological innovation,Vehicle dynamics},
  file = {/home/rushanth/Zotero/storage/GQQ9QHTL/Henle et al. - 2022 - Architecture platforms for future vehicles a comparison of ROS2 and Adaptive AUTOSAR.pdf}
}

@article{hong2024,
  title = {Autonomous {{Driving System Architecture}} with {{Integrated ROS2}} and {{Adaptive AUTOSAR}}},
  author = {Hong, Dongwon and Moon, Changjoo},
  year = {2024},
  month = jan,
  journal = {Electronics},
  volume = {13},
  number = {7},
  pages = {1303},
  publisher = {Multidisciplinary Digital Publishing Institute},
  issn = {2079-9292},
  doi = {10.3390/electronics13071303},
  urldate = {2025-06-07},
  abstract = {In the automotive industry, research is now underway to apply Adaptive Automotive Open System Architecture (AUTOSAR) to the development of next-generation mobility, such as autonomous driving and connected cars. However, research on autonomous driving is being predominantly conducted on the robotics platform ROS2 (Robot Operating System 2). This demonstrates a considerable distance between autonomous driving research and its application in actual vehicles. To bridge this gap, interoperability that leverages the strengths of the Adaptive AUTOSAR and ROS2 platforms and compensates for their weaknesses is required. Therefore, this study proposes an architecture for interoperability between the two platforms, named Autonomous Driving System with Integrated ROS2 and Adaptive AUTOSAR (ASIRA). The proposed architecture enables communication between each of the two platforms through the ROS2 SOME/IP Bridge and allows for the necessary data exchange. It validates them in autonomous driving scenarios and goes beyond vehicle development, testing, and prototyping to exploit the advantages of each platform. Additionally, the simulation of autonomous vehicles within the ASIRA architecture is demonstrated by interoperating the ROS2 representative open-source autonomous driving project, Autoware, with the Adaptive AUTOSAR simulator. This study contributes to the assimilation of ROS2 into the automotive industry and its application in real vehicles by linking ROS2 and Adaptive AUTOSAR.},
  copyright = {http://creativecommons.org/licenses/by/3.0/},
  language = {en},
  keywords = {Adaptive AUTOSAR,autonomous vehicles,interoperability,ROS2,SOME/IP},
  file = {/home/rushanth/Zotero/storage/QTG973TM/Hong und Moon - 2024 - Autonomous Driving System Architecture with Integrated ROS2 and Adaptive AUTOSAR.pdf}
}

@inproceedings{jiang2019vehicle,
  title = {Vehicle {{E}}/{{E Architecture}} and {{Its Adaptation}} to {{New Technical Trends}}},
  booktitle = {{{WCX SAE World Congress Experience}}},
  author = {Jiang, Shugang},
  year = {2019},
  month = apr,
  pages = {2019-01-0862},
  doi = {10.4271/2019-01-0862},
  urldate = {2025-06-13},
  file = {/home/rushanth/Zotero/storage/LR3CZV34/Jiang - 2019 - Vehicle EE Architecture and Its Adaptation to New Technical Trends.pdf}
}

@article{jinResearchMessageScheduling2018,
  title = {Research of {{Message Scheduling}} for {{In-Vehicle FlexRay Network Static Segment Based}} on {{Next Fit Decreasing}} ({{NFD}}) {{Algorithm}}},
  author = {Jin, Shiyi and Liu, Mengzhuo and Wu, Yujing and Xu, Yihu and Zhang, Jingnan and Xu, Yinan},
  year = {2018},
  month = oct,
  journal = {Applied Sciences},
  volume = {8},
  number = {11},
  pages = {2071},
  issn = {2076-3417},
  doi = {10.3390/app8112071},
  urldate = {2025-06-06},
  abstract = {FlexRay is becoming the in-vehicle communication network of the next generation. In this study, the main contents are the FlexRay network static segment scheduling algorithm and optimization strategy, improve the scheduling efficiency of vehicle network and optimize the performance of communication network. The FlexRay static segment characteristic was first analyzed, then selected bandwidth utilization as the performance metrics to scheduling problem. A signal packing method is proposed based on Next Fit Decreasing (NFD) algorithm. Then Frame ID (FID) multiplexing method was used to minimize the number of FIDs. Finally, experimental simulation by CANoe. FlexRay software, that shows the model can quickly obtain the message schedule of each node, effectively control the message payload size and reduced bus payload by 16.3\%, the number of FID drops 53.8\% while improving bandwidth utilization by 32.8\%.},
  copyright = {https://creativecommons.org/licenses/by/4.0/},
  language = {en},
  file = {/home/rushanth/Zotero/storage/ARAQBXLB/Jin et al. - 2018 - Research of Message Scheduling for In-Vehicle FlexRay Network Static Segment Based on Next Fit Decre.pdf}
}

@article{kampman2024,
  title = {{Eine dynamische, Dienste-orientierte Softwarearchitektur f{\"u}r die Anwendung im Automobil}},
  author = {Kampman, Alexandru},
  year = {2024},
  publisher = {Gesellschaft f{\"u}r Informatik e.V.},
  doi = {10.18420/DISS2023-14},
  urldate = {2025-06-07},
  abstract = {Diese Arbeit stellt die Automotive Service-oriented Software Architecture (ASOA) vor, eine updatebare, und orchestrierte Dienste-orientierte Softwarearchitektur f{\"u}r den Einsatz im Au- tomobil. Im Gegensatz zu traditionellen, zur Entwurfszeit integrierten Architekturen wird ein mit ASOA implementiertes System zur Laufzeit dynamisch integriert. Durch die Orchestrierung er- m{\"o}glicht ASOA zudem die Trennung nicht-modularer Aspekte der Systemintegration von syste- magnostischen Software-Diensten. Diese Trennung beg{\"u}nstigt die Updatebarkeit der Softwarearchi- tektur, da Software-Dienste in geringerem Umfang von Update-bedingten Seiteneffekten betroffen sind. ASOA erlaubt au{\ss}erdem eine detaillierte Introspektion in reaktive Wirkketten, wodurch sys- tematische Optimierungspotenziale hinsichtlich Ressourcenverbrauch und Ende-zu-Ende-Latenzen erschlossen werden. ASOA-Dienste sind sowohl auf zuk{\"u}nftigen High-Performance-Steuerger{\"a}ten als auch auf ressourcenbeschr{\"a}nkten Mikroprozessoren lauff{\"a}hig. Dar{\"u}ber hinaus verf{\"u}gt ASOA {\"u}ber ein Tool f{\"u}r die kollaborative Systementwicklung. Der Einsatz der ASOA wurde in vier voll- st{\"a}ndigen automatisierten Fahrzeugprotoypen demonstriert, die im Kontext eines deutschlandweiten Gro{\ss}projektes entstanden sind. Durch die Kombination dieser Merkmale birgt ASOA das Potenzial, Entwicklungszyklen und die Time-to-Market von Softwareinnovationen zu verk{\"u}rzen. Diese F{\"a}hig- keiten sind angesichts der stark wachsenden Bedeutung von Software in der Automobilindustrie von essenzieller Bedeutung.},
  isbn = {9783885799825},
  language = {de}
}

@inproceedings{kampmann2019,
  title = {A {{Dynamic Service-Oriented Software Architecture}} for {{Highly Automated Vehicles}}},
  booktitle = {2019 {{IEEE Intelligent Transportation Systems Conference}} ({{ITSC}})},
  author = {Kampmann, Alexandru and Alrifaee, Bassam and Kohout, Markus and W{\"u}stenberg, Andreas and Woopen, Timo and Nolte, Marcus and Eckstein, Lutz and Kowalewski, Stefan},
  year = {2019},
  month = oct,
  pages = {2101--2108},
  doi = {10.1109/ITSC.2019.8916841},
  urldate = {2025-06-07},
  abstract = {We present an ecosystem comprised of multiple building blocks that are centered around a simple, pragmatic concept for service-oriented architectures (SOA). Due to rigid design-time integration, today's prevailing automotive electric, electronic and software architectures are often unsuitable for infield updates or system reconfigurations. As statically integrated architectures do not provide the flexibility required to keep up with shorter development and technology life cycles of connected and automated vehicles (AVs), service-oriented architectures are a promising way forward. We present a SOA concept that allows for dynamic, runtime integrated software architectures. Our implementation stack equally supports full-scale computers and resource-constrained platforms. We facilitate architecture specification through a web-based description tool, which follows a simple paradigm that has applications beyond software architectures. The evaluation provides benchmarks of our implementation on an automotive-grade embedded system and a trial login to our architecture specification tool.},
  keywords = {Automotive engineering,Computer architecture,Runtime,Service-oriented architecture,Silicon},
  file = {/home/rushanth/Zotero/storage/6YHUJU7K/Kampmann et al. - 2019 - A Dynamic Service-Oriented Software Architecture for Highly Automated Vehicles.pdf}
}

@misc{kang2019formal,
  title = {A {{Formal Verification Technique}} for {{Architecture-based Embedded Systems}} in {{EAST-ADL}}},
  author = {Kang, Eun-Young},
  year = {2019},
  month = mar,
  number = {arXiv:1903.06241},
  eprint = {1903.06241},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.1903.06241},
  urldate = {2025-07-12},
  abstract = {Development of quality assured software-intensive systems, such as automotive embedded systems, is an increasing challenge as the complexity of these systems significantly increases. EAST-ADL is an architecture description language developed to specify automotive embedded system architectures at multiple abstraction levels in the development of safety-critical automotive products. In this paper, we propose an architecture-based verification technique which enhances the model-based development process supported by EAST-ADL by adapting model-checking to EAST-ADL specifications. We employ UPPAAL as a verification tool to ensure that predicted function behaviors of the models in EAST-ADL satisfy functional and real-time requirements. The criteria for this architecture-based verification is presented and the transformation rules which comply with this criteria are derived. This enables us to extract the relevant information from EAST-ADL specifications and to generate analyzable UPPAAL models. The formal semantics of EAST-ADL is defined which is essential to automate the verification of EAST-ADL specifications. Our approach is demonstrated by verifying the safety of the steering truck system units.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Software Engineering},
  file = {/home/rushanth/Zotero/storage/2VQLXJ4K/Kang - 2019 - A Formal Verification Technique for Architecture-based Embedded Systems in EAST-ADL.pdf;/home/rushanth/Zotero/storage/HY3KA6ZG/1903.html}
}

@misc{kang2019formala,
  title = {A {{Formal Verification Technique}} for {{Architecture-based Embedded Systems}} in {{EAST-ADL}}},
  author = {Kang, Eun-Young},
  year = {2019},
  month = mar,
  number = {arXiv:1903.06241},
  eprint = {1903.06241},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.1903.06241},
  urldate = {2025-07-12},
  abstract = {Development of quality assured software-intensive systems, such as automotive embedded systems, is an increasing challenge as the complexity of these systems significantly increases. EAST-ADL is an architecture description language developed to specify automotive embedded system architectures at multiple abstraction levels in the development of safety-critical automotive products. In this paper, we propose an architecture-based verification technique which enhances the model-based development process supported by EAST-ADL by adapting model-checking to EAST-ADL specifications. We employ UPPAAL as a verification tool to ensure that predicted function behaviors of the models in EAST-ADL satisfy functional and real-time requirements. The criteria for this architecture-based verification is presented and the transformation rules which comply with this criteria are derived. This enables us to extract the relevant information from EAST-ADL specifications and to generate analyzable UPPAAL models. The formal semantics of EAST-ADL is defined which is essential to automate the verification of EAST-ADL specifications. Our approach is demonstrated by verifying the safety of the steering truck system units.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Software Engineering},
  file = {/home/rushanth/Zotero/storage/7KKH9PSH/Kang - 2019 - A Formal Verification Technique for Architecture-based Embedded Systems in EAST-ADL.pdf;/home/rushanth/Zotero/storage/9X4FYDLF/1903.html}
}

@misc{kluner2024moderna,
  title = {Modern {{Middlewares}} for {{Automated Vehicles}}: {{A Tutorial}}},
  shorttitle = {Modern {{Middlewares}} for {{Automated Vehicles}}},
  author = {Kl{\"u}ner, David Philipp and Molz, Marius and Kampmann, Alexandru and Kowalewski, Stefan and Alrifaee, Bassam},
  year = {2024},
  month = dec,
  journal = {arXiv.org},
  urldate = {2025-06-12},
  abstract = {This paper offers a tutorial on current middlewares in automated vehicles. Our aim is to provide the reader with an overview of current middlewares and to identify open challenges in this field. We start by explaining the fundamentals of software architecture in distributed systems and the distinguishing requirements of Automated Vehicles. We then distinguish between communication middlewares and architecture platforms and highlight their key principles and differences. Next, we present five state-of-the-art middlewares as well as their capabilities and functions. We explore how these middlewares could be applied in the design of future vehicle software and their role in the automotive domain. Finally, we compare the five middlewares presented and discuss open research challenges.},
  howpublished = {https://arxiv.org/abs/2412.07817v1},
  language = {en},
  file = {/home/rushanth/Zotero/storage/TYJGVVX4/Klüner et al. - 2024 - Modern Middlewares for Automated Vehicles A Tutorial.pdf}
}

@article{kochanthara2021functional,
  title = {A Functional Safety Assessment Method for Cooperative Automotive Architecture},
  author = {Kochanthara, Sangeeth and Rood, Niels and Saberi, Arash Khabbaz and Cleophas, Loek and Dajsuren, Yanja and {van den Brand}, Mark},
  year = {2021},
  month = sep,
  journal = {Journal of Systems and Software},
  volume = {179},
  pages = {110991},
  issn = {0164-1212},
  doi = {10.1016/j.jss.2021.110991},
  urldate = {2025-07-12},
  abstract = {The scope of automotive functions has grown from a single vehicle as an entity to multiple vehicles working together as an entity, referred to as cooperative driving. The current automotive safety standard, ISO 26262, is designed for single vehicles. With the increasing number of cooperative driving capable vehicles on the road, it is now imperative to systematically assess the functional safety of architectures of these vehicles. Many methods are proposed to assess architectures with respect to different quality attributes in the software architecture domain, but to the best of our knowledge, functional safety assessment of automotive architectures is not explored in the literature. We present a method, that leverages existing research in software architecture and safety engineering domains, to check whether the functional safety requirements for a cooperative driving scenario are fulfilled in the technical architecture of a vehicle. We apply our method on a real-life academic prototype for a cooperative driving scenario, platooning, and discuss our insights.},
  keywords = {Automotive software architecture,Cooperative driving,Functional safety,ISO 26262,Platooning,Safety engineering},
  file = {/home/rushanth/Zotero/storage/FACW38MI/Kochanthara et al. - 2021 - A functional safety assessment method for cooperative automotive architecture.pdf;/home/rushanth/Zotero/storage/94DT62RX/S0164121221000881.html}
}

@article{kollmann2010comparative,
  title = {Comparative {{Application}} of {{Real-Time Verification Methods}} to an {{Automotive Architecture}}},
  author = {Kollmann, Steffen and Pollex, Victor and Kempf, Kilian and Slomka, Frank},
  year = {2010},
  abstract = {Designing embedded systems is a challenge. This applies especially to distributed automotive architectures. The high connectivity of different control units forms heterogeneous system architectures that have to handle the many different applications involved in providing the systems' services. This has a direct impact on model based design techniques which must be able to verify that different design constraints are satisfied. One issue is the realtime analysis for checking whether the different applications meet their real-time deadlines or not. In the past 40 years, many techniques have been developed to find an answer to this question. In this paper, different approaches for the verification of real-time behavior of an automotive architecture are compared. Two tools that are available on the market and two from universities, including a new prototype, have been chosen. In order to compare these tools in an appropriate way we have applied them to an automotive industry state of the art architecture model.},
  language = {en},
  file = {/home/rushanth/Zotero/storage/5UJE4EDZ/Kollmann et al. - 2010 - Comparative Application of Real-Time Veriﬁcation Methods to an Automotive Architecture.pdf}
}

@inproceedings{kugele2017a,
  title = {On {{Service-Orientation}} for {{Automotive Software}}},
  booktitle = {2017 {{IEEE International Conference}} on {{Software Architecture}} ({{ICSA}})},
  author = {Kugele, Stefan and Obergfell, Philipp and Broy, Manfred and Creighton, Oliver and Traub, Matthias and Hopfensitz, Wolfgang},
  year = {2017},
  month = apr,
  pages = {193--202},
  doi = {10.1109/ICSA.2017.20},
  urldate = {2025-06-09},
  abstract = {Background: During the last decades, the functional power and complexity of automotive E/E architectures grew radically and is going to grow further in the future. For highly and fully automated driving, functions with the highest safety integrity level need to be realized, requiring new development methodologies and a new level of formal rigor. Aim: We investigate to what extent SOA concepts are applicable for safety-critical embedded automotive software systems and whether this concept is appealing to E/E architects. Method: We conducted a survey research by interviewing system architects at our industrial partner, then we applied the grounded theory method in order to derive a theory and a set of requirements for an automotive SOA approach. Additionally, we illustrate the approach using a function needed in a highly automated driving scenario. Results: We present a formal service model and an automotive SOA framework. Both aspects, i.e., architecture structuring and formal service description resulted from the analyzed interview data. Limitation: This approach has not been evaluated extensively, yet. Conclusion: Our first results suggest that SOA concepts are indeed successfully applicable in (continuous) automotive software engineering and are a means to cope with complexity and safety requirements.},
  keywords = {automotive,Automotive engineering,Complexity theory,Computer architecture,formal modeling,Interviews,Semiconductor optical amplifiers,service-orientation,Service-oriented architecture,SOA},
  file = {/home/rushanth/Zotero/storage/EBQSMKWC/Kugele et al. - 2017 - On Service-Orientation for Automotive Software.pdf}
}

@article{kugeleModelbasedResourceAnalysis2021,
  title = {Model-Based Resource Analysis and Synthesis of Service-Oriented Automotive Software Architectures},
  author = {Kugele, Stefan and Obergfell, Philipp and Sax, Eric},
  year = {2021},
  month = dec,
  journal = {Software and Systems Modeling},
  volume = {20},
  number = {6},
  pages = {1945--1975},
  issn = {1619-1366, 1619-1374},
  doi = {10.1007/s10270-021-00896-9},
  urldate = {2024-09-29},
  abstract = {Abstract                            Context               Automotive software architectures describe distributed functionality by an interaction of software components. One drawback of today's architectures is their strong integration into the onboard communication network based on predefined dependencies at design time. The idea is to reduce this rigid integration and technological dependencies. To this end, service-oriented architecture offers a suitable methodology since network communication is dynamically established at run-time.                                         Aim               We target to provide a methodology for analysing hardware resources and synthesising automotive service-oriented architectures based on platform-independent service models. Subsequently, we focus on transforming these models into a platform-specific architecture realisation process following AUTOSAR Adaptive.                                         Approach               For the platform-independent part, we apply the concepts of design space exploration and simulation to analyse and synthesise deployment configurations, i.~e., mapping services to hardware resources at an early development stage. We refine these configurations to AUTOSAR Adaptive software architecture models representing the necessary input for a subsequent implementation process for the platform-specific part.                                         Result               We present deployment configurations that are optimal for the usage of a given set of computing resources currently under consideration for our next generation of E/E architecture. We also provide simulation results that demonstrate the ability of these configurations to meet the run time requirements. Both results helped us to decide whether a particular configuration can be implemented. As a possible software toolchain for this purpose, we finally provide a prototype.                                         Conclusion               The use of models and their analysis are proper means to get there, but the quality and speed of development must also be considered.},
  language = {en},
  keywords = {notion},
  file = {/home/rushanth/Zotero/storage/LPB99E5X/Kugele et al. - 2021 - Model-based resource analysis and synthesis of service-oriented automotive software architectures.pdf}
}

@inproceedings{manderscheidNetworkCalculusValidation2011,
  title = {Network {{Calculus}} for the {{Validation}} of {{Automotive Ethernet In-vehicle Network Configurations}}},
  booktitle = {2011 {{International Conference}} on {{Cyber-Enabled Distributed Computing}} and {{Knowledge Discovery}}},
  author = {Manderscheid, Martin and Langer, Falk},
  year = {2011},
  month = oct,
  pages = {206--211},
  publisher = {IEEE},
  address = {Beijing, China},
  doi = {10.1109/CyberC.2011.42},
  urldate = {2025-06-06},
  isbn = {978-1-4577-1827-4},
  file = {/home/rushanth/Zotero/storage/P3NQT5EE/Manderscheid und Langer - 2011 - Network Calculus for the Validation of Automotive Ethernet In-vehicle Network Configurations.pdf}
}

@misc{mauser2024centralization,
  title = {Centralization Potential of Automotive {{E}}/{{E}} Architectures},
  author = {Mauser, Lucas and Wagner, Stefan},
  year = {2024},
  month = sep,
  number = {arXiv:2409.10690},
  eprint = {2409.10690},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2409.10690},
  urldate = {2025-07-09},
  abstract = {Current automotive E/E architectures are subject to significant transformations: Computing-power-intensive advanced driver-assistance systems, bandwidth-hungry infotainment systems, the connection of the vehicle with the internet and the consequential need for cyber-security drives the centralization of E/E architectures. A centralized architecture is often seen as a key enabler to master those challenges. Available research focuses mostly on the different types of E/E architectures and contrasts their advantages and disadvantages. There is a research gap on guidelines for system designers and function developers to analyze the potential of their systems for centralization. The present paper aims to quantify centralization potential reviewing relevant literature and conducting qualitative interviews with industry practitioners. In literature, we identified seven key automotive system properties reaching limitations in current automotive architectures: busload, functional safety, computing power, feature dependencies, development and maintenance costs, error rate, modularity and flexibility. These properties serve as quantitative evaluation criteria to estimate whether centralization would enhance overall system performance. In the interviews, we have validated centralization and its fundament - the conceptual systems engineering - as capabilities to mitigate these limitations. By focusing on practical insights and lessons learned, this research provides system designers with actionable guidance to optimize their systems, addressing the outlined challenges while avoiding monolithic architecture. This paper bridges the gap between theoretical research and practical application, offering valuable takeaways for practitioners.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Software Engineering},
  file = {/home/rushanth/Zotero/storage/G2G75JUS/Mauser and Wagner - 2024 - Centralization potential of automotive EE architectures.pdf;/home/rushanth/Zotero/storage/7GAERJEE/2409.html}
}

@article{neely2006adaptive,
  title = {Adaptive Middleware for Autonomic Systems},
  author = {Neely, Steve and Dobson, Simon and Nixon, Paddy},
  year = {2006},
  month = oct,
  journal = {annals of telecommunications - annales des t{\'e}l{\'e}communications},
  volume = {61},
  number = {9-10},
  pages = {1099--1118},
  issn = {0003-4347, 1958-9395},
  doi = {10.1007/BF03219883},
  urldate = {2025-07-04},
  abstract = {The increasingly dynamic nature of resource discovery and binding in modern large-scale distributed and mobile systems poses significant challenges for existing middleware platforms. Future platforms must provide strong support for adaptive behaviour in order both to maintain and optimise services in the face of changing context. We use a survey of existing middleware systems to develop some core themes that characterise and constrain the ability of these approaches to support the development of adaptive and autonomic systems, and draw some possible trends for developing future platforms more appropriate to these domains.},
  copyright = {http://www.springer.com/tdm},
  language = {en},
  file = {/home/rushanth/Zotero/storage/APKK2SYR/Neely et al. - 2006 - Adaptive middleware for autonomic systems.pdf}
}

@article{rumezOverviewAutomotiveServiceOriented2020,
  title = {An {{Overview}} of {{Automotive Service-Oriented Architectures}} and {{Implications}} for {{Security Countermeasures}}},
  author = {Rumez, Marcel and Grimm, Daniel and Kriesten, Reiner and Sax, Eric},
  year = {2020},
  journal = {IEEE Access},
  volume = {8},
  pages = {221852--221870},
  issn = {2169-3536},
  doi = {10.1109/ACCESS.2020.3043070},
  urldate = {2024-10-11},
  copyright = {https://creativecommons.org/licenses/by/4.0/legalcode},
  file = {/home/rushanth/Zotero/storage/37WQTJIE/Rumez et al. - 2020 - An Overview of Automotive Service-Oriented Architectures and Implications for Security Countermeasur.pdf}
}

@article{schegolev,
  title = {Cost {{Perspective}} of a {{Service Oriented Architecture}} in {{Vehicle Design}}},
  author = {Schegolev, Boris and Wijekoon, Himesha and Merunka, Vojt{\v e}ch},
  abstract = {This paper looks at organization of micro-controllers in a Service Oriented Architecture in road vehicles. Research is being done on why SOA was originally considered by automotive manufacturers and compares the situation with the one of nowadays. Overview of a common implementation setup is provided as an example to showcase the resulting complexity of the solution. This is followed by a discussion on alternative paths that may be taken to reduce the overall cost of the solution with comparison of key differentiating points between SOA and the alternative solution.},
  language = {en},
  file = {/home/rushanth/Zotero/storage/GDP8224S/Schegolev et al. - Cost Perspective of a Service Oriented Architecture in Vehicle Design.pdf}
}

@inproceedings{schindewolf2022,
  title = {A {{Comparison}} of {{Architecture Paradigms}} for {{Dynamic Reconf{\i}gurable Automotive Networks}}},
  booktitle = {2022 {{International Conference}} on {{Connected Vehicle}} and {{Expo}} ({{ICCVE}})},
  author = {Schindewolf, Marc and Stoll, Hannes and Guissouma, Houssem and Puder, Andreas and Sax, Eric and Vetter, Andreas and Rumez, Marcel and Henle, Jacqueline},
  year = {2022},
  month = mar,
  pages = {1--7},
  issn = {2378-1297},
  doi = {10.1109/ICCVE52871.2022.9742775},
  urldate = {2025-06-07},
  abstract = {The automotive industry is undergoing a transformation in vehicle architecture development as established signal-oriented networks seem to reach their limits. To support a higher degree of flexibility for adaptations during and after the development process, the service-oriented architecture (SOA) paradigm has been introduced and is gaining importance. In this paper, we analyze the pros and cons of the signal-and service-oriented paradigms based on different phases of a development process (V-model), as well as in operation. By using a modular vehicle concept, we evaluate specific criteria through an analysis of an exemplary SOA use case.},
  keywords = {Automotive networks,Connected vehicles,Contract-based Design,Industries,Security,Service-oriented architecture,Service-oriented Architecture,Software Updates,Vehicle dynamics},
  file = {/home/rushanth/Zotero/storage/SFXEEF9B/Schindewolf et al. - 2022 - A Comparison of Architecture Paradigms for Dynamic Reconfıgurable Automotive Networks.pdf}
}

@article{slama2024,
  title = {Enabling Applications for Variable Vehicle Configurations with {{Software-defined Vehicle}} and {{Service-oriented Architecture}}},
  author = {Slama, Dirk and Lachenmaier, Jens},
  year = {2024},
  month = jan,
  journal = {Procedia CIRP},
  series = {17th {{CIRP Conference}} on {{Intelligent Computation}} in {{Manufacturing Engineering}} ({{CIRP ICME}} `23)},
  volume = {126},
  pages = {289--294},
  issn = {2212-8271},
  doi = {10.1016/j.procir.2024.08.341},
  urldate = {2025-06-07},
  abstract = {Modern vehicle applications must be able to handle variable vehicle configurations, including the vehicle sales configuration, feature-as-a-service and subscription configurations, as well as user configuration preferences. How can the foundations for modern vehicle applications -- service-oriented architecture and software-defined vehicle -- be utilized to enable such variable configurations? This paper is introducing the ``passenger welcome'' case to discuss different implementation options.},
  keywords = {Service-Oriented Architecture,Software-defined Vehicle,Vehicle Variant},
  file = {/home/rushanth/Zotero/storage/BMDG9SUX/S2212827124009120.html}
}

@inproceedings{venkitachalam2015,
  title = {Metrics for {{Verification}} and {{Validation}} of {{Architecture}} in {{Powertrain Software Development}}},
  booktitle = {Proceedings of the {{First International Workshop}} on {{Automotive Software Architecture}}},
  author = {Venkitachalam, Hariharan and Richenhagen, Johannes and Schlosser, Axel and Tasky, Thomas},
  year = {2015},
  month = may,
  series = {{{WASA}} '15},
  pages = {27--33},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/2752489.2752496},
  urldate = {2025-06-07},
  abstract = {The key challenges to software development in the powertrain domain are an exploding complexity, short development cycles and increasing quality and safety requirements. Architecture design addresses these challenges by structuring development over the entire lifecycle. Being a work product of the very early stage of development, architecture design errors lead to rework and higher development costs at any following development step. Verification and validation on architecture level leads to significant quality increase and reduces development risks. To approach this in a structured manner, the authors propose automated metric based evaluation of the software architecture. Metrics are identified and developed based on the Goal Question Metric approach. Quality goals for the architecture are derived from international standards, organizational goals and domain specific requirements. Questions are developed based on the goals to derive metrics for the evaluation of software quality criteria. The metrics developed are integrated into the software development process. At the end, application examples from series hybrid control software projects are shown. By the automated, metric-based approach so far extensive manual reviews and scenario analyses are supported by objective and measurable criteria. As an added value to state-of-the-art development strategies, frontloading of the costs is achieved by early evaluation of the software architecture.},
  isbn = {978-1-4503-3444-0},
  file = {/home/rushanth/Zotero/storage/B9V5PC2K/Venkitachalam et al. - 2015 - Metrics for Verification and Validation of Architecture in Powertrain Software Development.pdf}
}

@article{wang2024review,
  title = {Review of {{Electrical}} and {{Electronic Architectures}} for {{Autonomous Vehicles}}: {{Topologies}}, {{Networking}} and {{Simulators}}},
  shorttitle = {Review of {{Electrical}} and {{Electronic Architectures}} for {{Autonomous Vehicles}}},
  author = {Wang, Wenwei and Guo, Kaidi and Cao, Wanke and Zhu, Hailong and Nan, Jinrui and Yu, Lei},
  year = {2024},
  month = feb,
  journal = {Automotive Innovation},
  volume = {7},
  number = {1},
  pages = {82--101},
  issn = {2096-4250, 2522-8765},
  doi = {10.1007/s42154-023-00266-9},
  urldate = {2025-06-13},
  abstract = {Abstract             With the rapid development of autonomous vehicles, more and more functions and computing requirements have led to the continuous centralization in the topology of electrical and electronic (E/E) architectures. While certain Tier1 suppliers, such as BOSCH, have previously proposed a serial roadmap for E/E architecture development, implemented since 2015 with significant contributions to the automotive industry, lingering misconceptions and queries persist in actual engineering processes. Notably, there are concerns regarding the perspective of zone-oriented E/E architectures, characterized by zonal concentration, as successors to domain-oriented E/E architectures, known for functional concentration. Addressing these misconceptions and queries, this study introduces a novel parallel roadmap for E/E architecture development, concurrently evaluating domain-oriented and zone-oriented schemes. Furthermore, the study explores hybrid E/E architectures, amalgamating features from both paradigms. To align with the evolution of E/E architectures, networking technologies must adapt correspondingly. The networking mechanisms pivotal in E/E architecture design are comprehensively discussed. Additionally, the study delves into modeling and verification tools pertinent to E/E architecture topologies. In conclusion, the paper outlines existing challenges and unresolved queries in this domain.},
  language = {en},
  file = {/home/rushanth/Zotero/storage/S4ZZ7AWQ/Wang et al. - 2024 - Review of Electrical and Electronic Architectures for Autonomous Vehicles Topologies, Networking an.pdf}
}

@inproceedings{weissnegger2016automatic,
  title = {Automatic {{Testbench Generation}} for {{Simulation-based Verification}} of {{Safety-critical Systems}} in {{UML}}:},
  shorttitle = {Automatic {{Testbench Generation}} for {{Simulation-based Verification}} of {{Safety-critical Systems}} in {{UML}}},
  booktitle = {Proceedings of the 6th {{International Joint Conference}} on {{Pervasive}} and {{Embedded Computing}} and {{Communication Systems}}},
  author = {Weissnegger, Ralph and Pistauer, Markus and Kreiner, Christian and Schu{\ss}, Markus and R{\"o}mer, Kay and Steger, Christian},
  year = {2016},
  pages = {70--75},
  publisher = {{SCITEPRESS - Science and Technology Publications}},
  address = {Lisbon, Portugal},
  doi = {10.5220/0005997700700075},
  urldate = {2025-07-12},
  abstract = {The increasing amount of new assistance features in today's vehicles to ensure safe and reliable operations, imply increasingly complex systems. Since millions of test kilometers have to be driven to ensure a reliable system, simulation-based verification is becoming more important to reduce costs and time-to-market. Furthermore requirements, design and verification have to follow the stringent specifications from standards such as ISO26262 for functional safety. To overcome the complexity issues of safety-critical systems, a modelbased approach helps to unites all stakeholder, and helps non safety specialists to understand problems in the design. In this paper, we present a novel methodology to automatically generate testbenches for simulation based verification from a first safety analysis. Through early simulation with constraint random stimuli and parameters we are able to derive further requirements for real-time applications. Furthermore, these testbenches can be used through the whole safety-lifecycle. Our approach allows a tight and seamless integration of requirements, design and verification into the safety-lifecycle of ISO26262.},
  isbn = {978-989-758-195-3},
  language = {en},
  file = {/home/rushanth/Zotero/storage/B67WB5V9/Weissnegger et al. - 2016 - Automatic Testbench Generation for Simulation-based Verification of Safety-critical Systems in UML.pdf}
}

@article{zhuRequirementsDrivenAutomotiveElectrical2021,
  title = {Requirements-{{Driven Automotive Electrical}}/{{Electronic Architecture}}: {{A Survey}} and {{Prospective Trends}}},
  shorttitle = {Requirements-{{Driven Automotive Electrical}}/{{Electronic Architecture}}},
  author = {Zhu, Hailong and Zhou, Wei and Li, Zhiheng and Li, Li and Huang, Tao},
  year = {2021},
  journal = {IEEE Access},
  volume = {9},
  pages = {100096--100112},
  issn = {2169-3536},
  doi = {10.1109/ACCESS.2021.3093077},
  urldate = {2024-10-08},
  copyright = {https://creativecommons.org/licenses/by/4.0/legalcode},
  file = {/home/rushanth/Zotero/storage/W7CM8CMC/Zhu et al. - 2021 - Requirements-Driven Automotive ElectricalElectronic Architecture A Survey and Prospective Trends.pdf}
}
